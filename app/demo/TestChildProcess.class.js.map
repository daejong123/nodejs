{"version":3,"file":"TestChildProcess.class.js","sourceRoot":"","sources":["../../src/demo/TestChildProcess.class.ts"],"names":[],"mappings":"AAAA,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AAExB,IAAM,KAAK,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC;AAC7C,IAAM,IAAI,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC;AAO3C,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;AAyB9B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;AAU7B,IAAI,EAAE,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;AAC7B,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAA,IAAI;IACrB,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAA;AAChC,CAAC,CAAC,CAAA;AACF,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAA,IAAI;IACrB,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAA;AAChC,CAAC,CAAC,CAAA;AACF,EAAE,CAAC,EAAE,CAAC,OAAO,EAAE,UAAA,IAAI;IACf,OAAO,CAAC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAA;AAGF,IAAI,CAAC,OAAO,EAAE,UAAC,GAAG,EAAE,MAAM,EAAE,MAAM;IAC9B,EAAE,CAAA,CAAC,GAAG,CAAC,CAAC,CAAC;QACL,OAAO,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;IAC7B,CAAC;IACD,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,MAAM,CAAC,CAAC;AACvC,CAAC,CAAC,CAAA","sourcesContent":["console.log(__filename);\n\nconst spawn = require('child_process').spawn;\nconst exec = require('child_process').exec;\n\n\n// 比如要运行 du -sh /disk1 命令， \n// 使用spawn函数需要写成spawn(‘du‘, [‘-sh ‘, ‘/disk1’])，\n// 而使用exec函数时，可以直接写成exec(‘du -sh /disk1’)\n\nconsole.log(spawn.toString());\n/**\n function (file, args, options) {\n    var opts = normalizeSpawnArguments.apply(null, arguments);\n    var options = opts.options;\n    var child = new ChildProcess();\n  \n    debug('spawn', opts.args, options);\n  \n    child.spawn({\n      file: opts.file,\n      args: opts.args,\n      cwd: options.cwd,\n      windowsHide: !!options.windowsHide,\n      windowsVerbatimArguments: !!options.windowsVerbatimArguments,\n      detached: !!options.detached,\n      envPairs: opts.envPairs,\n      stdio: options.stdio,\n      uid: options.uid,\n      gid: options.gid\n    });\n  \n    return child;\n  }\n */\nconsole.log(exec.toString());\n/**\n function (command , options, callback) {\n    var opts = normalizeExecArgs.apply(null, arguments);\n    return exports.execFile(opts.file,\n                            opts.options,\n                            opts.callback);\n  }\n */\n// spawn是不支持callback函数,执行后就开始不断将数据从子进程返回给主进程,实时监控CPU,内存,IO,网络等数据。\nlet ls = spawn('ls', ['-a']);\nls.stdout.on('data', data=>{\n    console.log(\"stdout\" + data)\n})\nls.stderr.on('data', data=>{\n    console.log(\"stderr\" + data)\n})\nls.on('close', code=>{\n    console.log(\"进程退出\" + code);\n})\n\n// exec在子进程输出结果将放入buffer中，在结果返回完全之后，再将输出一次性地以回调函数参数的形式返回,有回调函数。\nexec('ls -a', (err, stdout, stderr) => {\n    if(err) {\n        console.log(\"err\" + err);\n    }\n    console.log(\"stdout::::\" + stdout);\n})"]}