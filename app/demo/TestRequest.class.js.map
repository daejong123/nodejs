{"version":3,"file":"TestRequest.class.js","sourceRoot":"","sources":["../../src/demo/TestRequest.class.ts"],"names":[],"mappings":"AAAA,IAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAEnC,OAAO,CAAC,6CAA6C,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE,IAAI;IACnE,EAAE,CAAC,CAAC,GAAG,CAAC;QAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAE1B,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;IACnC,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAClC,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,GAAG,MAAM,CAAC,CAAC;IAclC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC7B,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;QAClC,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,CAAC,CAAC;QACzB,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAE9B,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC;YAErB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACrB,CAAC;QACD,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;QACtC,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;QACtC,IAAI,QAAQ,GAAU,MAAM,CAAC,QAAiB,CAAC;QAE/C,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,QAAQ,CAAC,OAAO,CAAC,UAAA,IAAI;YACjB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAA;IACN,CAAC;AACL,CAAC,CAAC,CAAC;AAGH,IAAI,OAAO,GAAG;IACV,GAAG,EAAE,6CAA6C;IAClD,MAAM,EAAE,MAAM;IACd,IAAI,EAAE,IAAI;IACV,OAAO,EAAE;QACL,IAAI,EAAE,QAAQ;KACjB;CACJ,CAAC;AAEF,IAAI,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AACzC,OAAO,CAAC,GAAG,CAAC,OAAO,UAAU,CAAC,CAAC;AAC/B,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AAGxB,OAAO,CAAC;IACJ,GAAG,EAAE,6CAA6C;IAClD,MAAM,EAAE,MAAM;IACd,IAAI,EAAE,IAAI;IACV,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;KACrC;CAEJ,EAAE,UAAC,KAAK,EAAE,QAAQ,EAAE,IAAI;IACrB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAClB,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,QAAQ,CAAC,UAAU,IAAI,GAAG,CAAC,CAAC,CAAC;QACvC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACtB,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["const request = require('request');\n\nrequest('https://api.douban.com/v2/movie/coming_soon', (err, resp, body) => {\n    if (err) console.log(err);\n    // console.log(resp.statusCode);\n    let json_str = JSON.stringify(resp)\n    let js_obj = JSON.parse(json_str);\n    console.log(typeof body + \"哈哈哈哈\");\n    // console.log(js_obj);\n    // for(let o in resp) {\n    //     console.log(o + \",\"+ resp.o)\n    // }\n    // console.log(resp.body);\n    // console.log(body);\n\n    /**\n     * 注意只有js的object才可以使用点语法调用。 而json本质就是一对大括号{”str“: value} 无法使用点语法。\n     * request的get请求后，返回的结果resp是一个object对象。里面包含了许多属性如 statusCode， headers， body等等。\n     * 注意返回的body属性的值是一个string。如’{’count':20, 'subjects':[{'title':'王者归来'}]}‘, 因此想要解析json-str数据，就要将他转换成js-obj对象。\n     */\n\n    console.log(resp.statusCode);\n    if (!err && resp.statusCode === 200) {\n        console.log(typeof body);  //string\n        let result = JSON.parse(body); //json-string to js-obj\n        // console.log(result);\n        for (let key in result) {\n            //count start total subjects title\n            console.log(key);\n        }\n        console.log(\"title: \" + result.title);\n        console.log(\"count: \" + result.count);\n        let subjects: any[] = result.subjects as any[];\n        // let a: Array<any> = [];\n        console.log(\"title\");\n        subjects.forEach(elem => {\n            console.log(elem.title);\n        })\n    }\n});\n\n\nlet options = {\n    url: 'https://api.douban.com/v2/movie/coming_soon',\n    method: 'POST',\n    json: true,\n    headers: {\n        name: 'dottie'\n    }\n};\n\nlet optionsStr = JSON.stringify(options);\nconsole.log(typeof optionsStr);\nconsole.log(optionsStr);\n\n\nrequest({\n    url: 'https://api.douban.com/v2/movie/coming_soon',\n    method: \"POST\",\n    json: true,\n    headers: {\n        \"content-type\": \"application/json\",\n    },\n    // body: JSON.stringify(requestData)\n}, (error, response, body) => {\n    console.log(body);\n    if (!error && response.statusCode == 200) {\n        console.log(body);\n    }\n});"]}